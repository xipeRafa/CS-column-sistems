// Set up layout helpers (if you don't already have them)
@mixin clearfix () {
  &:before,
  &:after {
    content: " "; /* 1 */
    display: table; /* 2 */
  }
  &:after {
    clear: both;
  }
}





//  ==========================================
//  ================== Grid ==================
//  ==========================================

//  --- Introduction ---
//
//  Sass generated, semantic, percent-based grid system, so you don't have to!
//  This Sass Partial takes in the configurable settings and will create a grid framework without redundant code.
//  The naming conventions follow the BEM CSS pattern.
//  Control the width of the Column by a modifier class, configured into a reduced fraction.
//    - Ex: .grid__col--1-2 for 1/2 (50%) of it's parent container
//  This grid is a float-based grid system.
//  Grid framework supports "push" classes to move item to the left





// Grid Settings
///////////////////////////

$grid-settings : (
  block       : '.grid',  // {String}   - Block Class {String}
  slice       : 12,        // {Number}   - Number of available columns
  gutter      : 20px,     // {Number}   - Gutter between columns ** requires unit of measure **
  breakpoint  : 550px     // {Number}   - Maps to $breakpoint-list or just a window width
);

//  ___ Alias for $grid-settings ___
@function _grid ($key) {
  @return map-get($grid-settings, $key);
}


//  ___ Dynamic Map of (widths : class modifier) ___
//  As Sass chews through the available configurations for widths and semantic naming,
//  key-value pairs are evaluated against this Sass Map.
//  If the pair doesn't already exist, it is pushed to this Sass Map.
//  Building this map dynamically eliminates redundant CSS Output, making the code ligher and you happier

$grid-percent-map: (100%: full);





// Build a Sass Map of all the possible percentages and their reduced fraction pair
///////////////////////////////////////////////////////////////////////////////////

//  ___ Add to $grid-percent-map  ___
//  If $grid-percent-map doesn't already have the hash pair, add it!
@mixin _merge-grid-map($key, $value) {
  @if not map-has-key($grid-percent-map, $key) {
    $new-pair: ($key: $value);
    $grid-percent-map: map-merge($grid-percent-map, $new-pair) !global;
  }
}

//  ___ Evaluate all available widths ___
//  Loop through all slices based on the slice property of $grid-settings
//  Then loop through each loop index ($i) and divide into new loop index ($i2)
//  Why? 
//    - $i represents the denominator for the fraction.  $i2 represents the numerator.
//    - By looping through each slice as the denominator, we ensure that we are getting every possible fraction
//    - By starting at 1, and only pushing widths that aren't already populated in $grid-percent-map, we make sure that only reduced fractions are made available

@for $i from 1 through _grid( slice ) {
  @for $i2 from 1 to $i {
    $col-width: percentage( $i2 / $i );
    @include _merge-grid-map ( $col-width, #{$i2}-#{$i} );
  }
}





// Set up the basic Grid Column styles to extend
////////////////////////////////////////////////

//  We should always care about the amount of CSS that we pump out.
//  Lump all the shared styles together

%grid__col {
  float: left;
  padding-left: _grid( gutter );

  #{ _grid( block ) }--no-gutters &{
    padding-left:0;
  }

  @if _grid( breakpoint ) {

    // Collapse grid columns at breakpoint unless a grid class tells you not to
    #{ _grid( block ) }:not(#{ _grid( block ) }--no-collapse) & {
      @media (max-width: #{ _grid( breakpoint ) }) {
        float: none;
        margin-left: 0;
        width:100%;
      }
    }
  }
}





// Define Unique Styles
///////////////////////

// Put the digital pen, to the digital paper
// Generate the CSS for the Block element and the columns

#{ _grid( block ) } {
  @include clearfix();
  margin-left: -#{ _grid( gutter ) };

  &--no-gutters {
    margin-left: 0;
  }

  @each $key, $value in $grid-percent-map {
    &__col--#{$value} {
      @extend %grid__col;
      width: $key;
    }
    &__col--push-#{$value} {
      margin-left: $key;
    }
  }
}






*, *:before, *:after {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
  }


html {
  position: relative;
}

body {
  position: relative;
  background: url("http://a.rgbimg.com/cache1ois5u/users/e/er/ervinbacik/300/mrTD17s.jpg") no-repeat;
  background-size: 100% 100%;
  height: 100%;
  color: #fff;
  padding: 40px;
}

.grid + .grid {
  margin-top: 10px;
}

.inner-wrap {
  background: rgba(255, 255, 255, 0.2);
  border: 1px solid rgba(255, 255, 255, 0.15);
  padding: 10px;
  color: rgba(255, 255, 255, 0.6);
  text-align: center;
}
 

